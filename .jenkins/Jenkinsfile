pipeline {
    agent {
          docker {
              image 'maven:3.8.3-openjdk-17'
              reuseNode true
              registryUrl 'https://index.docker.io/v1/'
              registryCredentialsId 'project-docker-token'
          }
    }
    environment {
        GC =  credentials('private-project')
        GIT_REPO = 'project'
        GIT_USERNAME = 'SEOMW'
        TAG_VERSION = 'v1.0.0'
        DOCKER_IMAGE_NAME = 'project' // Docker 이미지 이름
        DOCKER_USERNAME = 'seomw' // Docker Hub 사용자 이름
        DOCKER_PASSWORD = credentials('project-docker-token') // Docker Hub 액세스 토큰 또는 비밀번호
        DOCKER_REGISTRY = 'https://index.docker.io/v1/' // Docker 레지스트리 URL
        DOCKER_REGISTRY_USERNAME = 'seomw' // Docker 레지스트리 사용자 이름
        DOCKER_REGISTRY_PASSWORD = credentials('project-docker-token') // Docker 레지스트리 액세스 토큰 또는 비밀번호
    }
    triggers {
         githubPush()   
    }
    stages {
        
        stage('maven build, test, packageing(war)') {
               steps{
                    sh 'mvn clean install'
              }  
        }
        stage('create docker image') {
            steps {
                script {
                    // 복사한 WAR 파일을 Docker 이미지의 작업 디렉토리로 이동
                    sh "cp target/demo-0.0.1-SNAPSHOT.war ${DOCKER_IMAGE_NAME}.war"
                    
                    // Docker 이미지 빌드 및 업로드
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${TAG_VERSION} ."
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh "docker push ${DOCKER_IMAGE_NAME}:${TAG_VERSION}"
                    
                    // Docker 레지스트리에 이미지 업로드
                    sh "docker login -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD} ${DOCKER_REGISTRY}"
                    sh "docker tag ${DOCKER_IMAGE_NAME}:${TAG_VERSION} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${TAG_VERSION}"
                    sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${TAG_VERSION}"
                }
            }
        }
        stage('github create release') {
            steps {
                script {
                    def response = sh(script: """
                        curl -sSL \
                          -X POST \
                          -H 'Accept: application/vnd.github+json' \
                          -H 'Authorization: Bearer ${GC_PSW}' \
                          -H 'X-GitHub-Api-Version: 2022-11-28' \
                          https://api.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases \
                          -d '{
                                  "tag_name":"${TAG_VERSION}",
                                  "target_commitish":"main",
                                  "name":"Release ${TAG_VERSION}",
                                  "body":"Description of the release",
                                  "draft":false,
                                  "prerelease":false,
                                  "generate_release_notes":false
                              }'
                    """, returnStdout: true) //스크립트 실행 후 출력 결과를 response 변수에 저장

                    sh "echo '$response'"

                    def json = readJSON text: "$response"
                    def id = json.id

                    sh "mv target/demo-0.0.1-SNAPSHOT.war ${GIT_REPO}-${TAG_VERSION}.war"

                    sh """
                        curl -L \
                              -X POST \
                              -H "Accept: application/vnd.github+json" \
                              -H "Authorization: Bearer ${GC_PSW}" \
                              -H "X-GitHub-Api-Version: 2022-11-28" \
                              -H "Content-Type: application/octet-stream" \
                              "https://uploads.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases/${id}/assets?name=${GIT_REPO}-${TAG_VERSION}.war" \
                              --data-binary "@${GIT_REPO}-${TAG_VERSION}.war"
                    """
                    
                }
            }
        }
    }          
}
