pipeline {
    agent any
    environment {
        GC =  credentials('private-project')
        GIT_REPO = 'project'
        GIT_USERNAME = 'SEOMW'
        TAG_VERSION = 'v1.0.2'
    }
    triggers {
         githubPush()   
    }
    stages {
        
        stage('maven build, test, packageing(war)') {
            agent {
                  docker {
                      image 'maven:3.8.3-openjdk-17'
                      reuseNode true
                      registryUrl 'https://index.docker.io/v1/'
                      registryCredentialsId 'project-docker-token'
                  }
            }
            steps{
                sh 'mvn clean install'
           }  
        }
        stage('Github Clone & Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/SEOMW/project.git'
                credentialsId('private-project') // Move credentialsId inside the steps block
            }
        }
        stage('Docker Build - httpd') {
            steps {
                script {
                    // Docker hub 에 로그인 하기 위해 사용
                    docker.withRegistry('https://index.docker.io/v1/', 'project-docker-token') {
                        // Dockerfile 로 이미지 생성
                        docker.build('seomw/project', './sample-apache')
                    }
                }
            }
        }
        stage('github create release') {
            steps {
                script {
                    def response = sh(script: """
                        curl -sSL \
                          -X POST \
                          -H 'Accept: application/vnd.github+json' \
                          -H 'Authorization: Bearer ${GC_PSW}' \
                          -H 'X-GitHub-Api-Version: 2022-11-28' \
                          https://api.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases \
                          -d '{
                                  "tag_name":"${TAG_VERSION}",
                                  "target_commitish":"main",
                                  "name":"Release ${TAG_VERSION}",
                                  "body":"Description of the release",
                                  "draft":false,
                                  "prerelease":false,
                                  "generate_release_notes":false
                              }'
                    """, returnStdout: true) //스크립트 실행 후 출력 결과를 response 변수에 저장

                    sh "echo '$response'"

                    def json = readJSON text: "$response"
                    def id = json.id

                    sh "mv target/demo-0.0.1-SNAPSHOT.war ${GIT_REPO}-${TAG_VERSION}.war"

                    sh """
                        curl -L \
                              -X POST \
                              -H "Accept: application/vnd.github+json" \
                              -H "Authorization: Bearer ${GC_PSW}" \
                              -H "X-GitHub-Api-Version: 2022-11-28" \
                              -H "Content-Type: application/octet-stream" \
                              "https://uploads.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases/${id}/assets?name=${GIT_REPO}-${TAG_VERSION}.war" \
                              --data-binary "@${GIT_REPO}-${TAG_VERSION}.war"
                    """
                    
                }
            }
        }
        stage('docker Image Push') {
            steps {
                script {
                    // Docker Hub에 로그인
                    docker.withRegistry('https://index.docker.io/v1/', 'project-docker-token') {
                        def img = docker.image('seomw/project')
                        img.push('latest')
                        img.push('0.1')
                    }
                    //sh 'docker push seomw/project:latest'
                }
            }
        }
    }
}
