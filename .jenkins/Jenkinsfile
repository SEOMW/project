pipeline {
    agent any
    environment {
        GC = credentials('private-project')
        GIT_REPO = 'project'
        GIT_USERNAME = 'SEOMW'
    }
    triggers {
        githubPush()
    }
    stages {
        stage('Build, Test, SonarQube Analysis') {
            agent {
                docker {
                    image 'maven:3.8.3-openjdk-17'
                    reuseNode true
                    registryUrl 'https://index.docker.io/v1/'
                    registryCredentialsId 'project-docker-token'
                    inside '-u root'
                }
            }
            steps {
                // Maven 빌드
                sh 'mvn clean install'
                
                // 소나큐브 실행
                script {
                    sh 'sonar-scanner -Dsonar.projectKey=Project01 -Dsonar.sources=src/main/ -Dsonar.tests=src/test/ -Dsonar.java.binaries=target -Dsonar.host.url=http://192.168.10.14:9000'
                }
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Github Clone & Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/SEOMW/project.git'
                    // credentialsId: 'github-jenkins-cicd'
            }
        }
        stage('Docker Build - httpd') {
            steps {
                script {
                    def buildNumber = env.BUILD_NUMBER
                    def imageTag = "v${buildNumber}"
                    
                    docker.withRegistry('https://index.docker.io/v1/', 'project-docker-token') {
                        def image = docker.build('seomw/project-apache', './sample-apache')
                        image.push('latest')
                        image.push(imageTag)
                    }
                    sh 'docker stop project-apache'
                    sh 'docker rm project-apache'
                    sh 'docker run -d -p 8082:80 --name project-apache seomw/project-apache'
                }
            }
        }
        stage('Docker Build - nginx') {
            steps {
                script {
                    def buildNumber = env.BUILD_NUMBER
                    def imageTag = "v${buildNumber}"

                    docker.withRegistry('https://index.docker.io/v1/', 'project-docker-token') {
                        def image = docker.build('seomw/project-nginx', './sample-nginx')
                        image.push('latest')
                        image.push(imageTag)
                    }
                    sh 'docker stop project-nginx'
                    sh 'docker rm project-nginx'
                    sh 'docker run -d -p 8081:80 --name project-nginx seomw/project-nginx'
                }
            }
        }
        stage('github create release') {
            steps {
                script {
                    def buildNumber = env.BUILD_NUMBER
                    def releaseTag = "v${buildNumber}"
                    
                    def response = sh(script: """
                        curl -sSL \
                          -X POST \
                          -H 'Accept: application/vnd.github+json' \
                          -H 'Authorization: Bearer ${GC_PSW}' \
                          -H 'X-GitHub-Api-Version: 2022-11-28' \
                          https://api.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases \
                          -d '{
                                  "tag_name":"${releaseTag}",
                                  "target_commitish":"main",
                                  "name":"Release ${releaseTag}",
                                  "body":"Description of the release",
                                  "draft":false,
                                  "prerelease":false,
                                  "generate_release_notes":false
                              }'
                    """, returnStdout: true)

                    sh "echo '$response'"

                    def json = readJSON text: "$response"
                    def id = json.id

                    sh "mv target/demo-0.0.1-SNAPSHOT.war ${GIT_REPO}-${releaseTag}.war"

                    sh """
                        curl -L \
                              -X POST \
                              -H "Accept: application/vnd.github+json" \
                              -H "Authorization: Bearer ${GC_PSW}" \
                              -H "X-GitHub-Api-Version: 2022-11-28" \
                              -H "Content-Type: application/octet-stream" \
                              "https://uploads.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases/${id}/assets?name=${GIT_REPO}-${releaseTag}.war" \
                              --data-binary "@${GIT_REPO}-${releaseTag}.war"
                    """
                }
            }
        }
    }
}
